#!/usr/bin/env ruby

require 'fileutils'
require 'tempfile'

class TOCEntry
  attr_accessor :level, :text, :link

  def initialize(level, text, link)
    @level = level
    @text = text
    @link = link
  end

  def to_s
    ["    " * @level, "* [#{@text}](\##{@link})"].join
  end
end

class TOC
  def initialize
    @entries = []
  end

  def add_entry(level, text, link)
    @entries.push(TOCEntry.new(level, text, link))
  end

  def to_s
    s = [
      "## Table of Contents",
      "",
      *@entries.map(&:to_s)
    ].join("\n")
  end
end

class Document
  def initialize
    @header = []
    @body = []
    @toc = TOC.new
  end

  def add_line(line, to_header = false)
    if to_header
      @header << line
    else
      @body << line
    end
  end

  def add_heading(level, id, heading)
    link = linkify(id)
    add_line("#{level} <div id='#{link}'/> #{id}: #{heading}")
    @toc.add_entry(level.count('#') - 2, "#{id}: #{heading}", link)
  end

  def to_s
    [*@header, @toc.to_s, "", *@body].join("\n")
  end

  def linkify(id)
    id.downcase.gsub(/\./, '-')
  end
end

def main(argv)
  in_toc = false
  in_header = true
  doc = Document.new

  filename = argv[0]
  File.open(filename).each do |line|
    if line.match(/^#+ Table of Contents$/)
      in_toc = true
    elsif in_toc && line.match(/^#/)
      in_toc = false
    end

    if !in_toc
      if md = line.match(/^(#+)\s*(?:<div.*>\s)?(.*):\s*(.*)$/)
        in_header = false
        level, id, heading = md[1,3]

        doc.add_heading(level, id, heading)
      else
        doc.add_line(line.rstrip, in_header)
      end
    end
  end

  out_file = Tempfile.new('md_add_toc')
  begin
    out_file.write(doc.to_s)
  rescue StandardError => e
    out_file.close
    out_file.unlink
  end

  out_file.close
  FileUtils.mv(out_file.path, filename)
end

main(ARGV)
